/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.runtime.multimap.v1;

option java_package = "io.atomix.api.multimap.v1";
option java_outer_classname = "AtomicMultiMapV1";
option java_multiple_files = true;

import "runtime/v1/runtime.proto";
import "runtime/multimap/v1/multimaps.proto";
import "gogoproto/gogo.proto";

// MultiMap is a service for a multimap primitive
service MultiMap {
    // Size returns the size of the map
    rpc Size (SizeRequest) returns (SizeResponse);

    // Put adds a value to an entry in the map
    rpc Put (PutRequest) returns (PutResponse);

    // PutAll adds values to an entry in the map
    rpc PutAll (PutAllRequest) returns (PutAllResponse);

    // PutEntries adds entries to the map
    rpc PutEntries (PutEntriesRequest) returns (PutEntriesResponse);

    // Replace replaces the values of an entry in the map
    rpc Replace (ReplaceRequest) returns (ReplaceResponse);

    // Contains checks if an entry exists in the map
    rpc Contains (ContainsRequest) returns (ContainsResponse);

    // Get gets the entry for a key
    rpc Get (GetRequest) returns (GetResponse);

    // Remove removes an entry from the map
    rpc Remove (RemoveRequest) returns (RemoveResponse);

    // RemoveAll removes a key from the map
    rpc RemoveAll (RemoveAllRequest) returns (RemoveAllResponse);

    // RemoveEntries removes entries from the map
    rpc RemoveEntries (RemoveEntriesRequest) returns (RemoveEntriesResponse);

    // Clear removes all entries from the map
    rpc Clear (ClearRequest) returns (ClearResponse);

    // Events listens for change events
    rpc Events (EventsRequest) returns (stream EventsResponse);

    // Entries lists all entries in the map
    rpc Entries (EntriesRequest) returns (stream EntriesResponse);

    // Create creates the MultiMap
    // Deprecated: use the MultiMaps service instead
    rpc Create (CreateRequest) returns (CreateResponse) {
        option deprecated = true;
    }

    // Close closes the MultiMap
    // Deprecated: use the MultiMaps service instead
    rpc Close (CloseRequest) returns (CloseResponse) {
        option deprecated = true;
    }
}

message SizeRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message SizeResponse {
    uint32 size = 1;
}

message PutRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
    string value = 3;
}

message PutResponse {

}

message PutAllRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
    repeated string values = 3;
}

message PutAllResponse {
    bool updated = 1;
}

message PutEntriesRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    repeated Entry entries = 2 [
        (gogoproto.nullable) = false
    ];
}

message PutEntriesResponse {
    bool updated = 1;
}

message ReplaceRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
    repeated string values = 3;
}

message ReplaceResponse {
    repeated string prev_values = 1;
}

message GetRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
}

message GetResponse {
    repeated string values = 1;
}

message ContainsRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
    string value = 3;
}

message ContainsResponse {
    bool result = 1;
}

message RemoveRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
    string value = 3;
}

message RemoveResponse {
    repeated string values = 1;
}

message RemoveAllRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
    repeated string values = 3;
}

message RemoveAllResponse {
    bool updated = 2;
}

message RemoveEntriesRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    repeated Entry entries = 2 [
        (gogoproto.nullable) = false
    ];
}

message RemoveEntriesResponse {
    bool updated = 1;
}

message ClearRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message ClearResponse {

}

message EntriesRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    bool watch = 2;
}

message EntriesResponse {
    Entry entry = 1 [
        (gogoproto.nullable) = false
    ];
}

message EventsRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string key = 2;
}

message EventsResponse {
    Event event = 2 [
        (gogoproto.nullable) = false
    ];
}

message Event {
    string key = 1;

    oneof event {
        Added added = 2;
        Removed removed = 3;
    }

    message Added {
        string value = 1;
    }

    message Removed {
        string value = 1;
    }
}

message Entry {
    string key = 1;
    repeated string values = 3;
}
