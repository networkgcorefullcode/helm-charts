/*
SPDX-FileCopyrightText: 2022-present Open Networking Foundation <info@opennetworking.org>

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package atomix.runtime.election.v1;

option java_package = "io.atomix.api.election.v1";
option java_outer_classname = "LeaderElectionV1";
option java_multiple_files = true;

import "runtime/v1/runtime.proto";
import "runtime/election/v1/elections.proto";
import "gogoproto/gogo.proto";

// LeaderElection is a service for a leader election primitive
service LeaderElection {
    // Enter enters the leader election
    rpc Enter (EnterRequest) returns (EnterResponse);

    // Withdraw withdraws a candidate from the leader election
    rpc Withdraw (WithdrawRequest) returns (WithdrawResponse);

    // Anoint anoints a candidate leader
    rpc Anoint (AnointRequest) returns (AnointResponse);

    // Promote promotes a candidate
    rpc Promote (PromoteRequest) returns (PromoteResponse);

    // Demote demotes a candidate
    rpc Demote (DemoteRequest) returns (DemoteResponse);

    // Evict evicts a candidate from the election
    rpc Evict (EvictRequest) returns (EvictResponse);

    // GetTerm gets the current leadership term
    rpc GetTerm (GetTermRequest) returns (GetTermResponse);

    // Watch watches the election for events
    rpc Watch (WatchRequest) returns (stream WatchResponse);

    // Create creates the election
    // Deprecated: use the LeaderElections service instead
    rpc Create (CreateRequest) returns (CreateResponse) {
        option deprecated = true;
    }

    // Close closes the election
    // Deprecated: use the LeaderElections service instead
    rpc Close (CloseRequest) returns (CloseResponse) {
        option deprecated = true;
    }
}

message EnterRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message EnterResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message WithdrawRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message WithdrawResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message AnointRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message AnointResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message PromoteRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message PromoteResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message DemoteRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message DemoteResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message EvictRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
    string candidate = 2;
}

message EvictResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message GetTermRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message GetTermResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message WatchRequest {
    atomix.runtime.v1.PrimitiveID id = 1 [
        (gogoproto.customname) = "ID",
        (gogoproto.nullable) = false
    ];
}

message WatchResponse {
    Term term = 1 [
        (gogoproto.nullable) = false
    ];
}

message Term {
    uint64 term = 1;
    string leader = 2;
    repeated string candidates = 3;
}
